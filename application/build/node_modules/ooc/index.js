// Generated by CoffeeScript 1.7.1
(function() {
  var Build, CoffeeFile, DebugFile, FileList, PathList, ReleaseFile, TempFile, cp, fs,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  cp = require("child_process");

  Build = (function() {
    function Build(sourceDir, mainClass, debugOutput, releaseOutput, instanceName) {
      this.sourceDir = sourceDir;
      this.mainClass = mainClass;
      this.debugOutput = debugOutput;
      this.releaseOutput = releaseOutput;
      this.instanceName = instanceName;
      this._trimSourceDir = __bind(this._trimSourceDir, this);
      this._onReleaseComplete = __bind(this._onReleaseComplete, this);
      this._onDebugComplete = __bind(this._onDebugComplete, this);
      this._trimSourceDir();
      this.paths = new PathList(this);
      this.files = new FileList(this);
      this.tempFile = new TempFile(this);
      this.debugFile = new DebugFile(this, this._onDebugComplete);
    }

    Build.prototype._onDebugComplete = function(error) {
      if (error) {
        this.tempFile.remove();
        return;
      }
      console.log("Compiled: " + this.debugOutput);
      if (this.releaseOutput) {
        return this.releaseFile = new ReleaseFile(this, this._onReleaseComplete);
      } else {
        return this.tempFile.remove();
      }
    };

    Build.prototype._onReleaseComplete = function(error) {
      if (!error) {
        console.log("Compiled: " + this.releaseOutput);
      }
      return this.tempFile.remove();
    };

    Build.prototype._trimSourceDir = function() {
      if (this.sourceDir[this.sourceDir.length - 1] !== "/") {
        return;
      }
      return this.sourceDir = this.sourceDir.substring(0, this.sourceDir.length - 1);
    };

    return Build;

  })();

  PathList = (function(_super) {
    __extends(PathList, _super);

    function PathList(build) {
      this.build = build;
      this._getPath = __bind(this._getPath, this);
      this._readImports = __bind(this._readImports, this);
      this._readImports(this.build.mainClass);
      this.push(this.build.mainClass);
    }

    PathList.prototype._readImports = function(path) {
      var line, lines, raw, _i, _len, _results;
      raw = fs.readFileSync(path, "utf8");
      lines = raw.split("\n");
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (line.indexOf("import ") === 0) {
          path = this._getPath(line);
          if (this.indexOf(path) > -1) {
            continue;
          }
          this._readImports(path);
          _results.push(this.push(path));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PathList.prototype._getPath = function(line) {
      var dir, path;
      dir = this.build.sourceDir;
      if (dir[dir.length - 1] !== "/") {
        dir = dir + "/";
      }
      path = line.replace("import ", "");
      path = path.replace(/\./g, "/");
      path = dir + path + ".coffee";
      return path;
    };

    return PathList;

  })(Array);

  FileList = (function(_super) {
    __extends(FileList, _super);

    function FileList(build) {
      var i, max, path, _i, _j, _len, _ref;
      this.build = build;
      _ref = this.build.paths;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        this.push(new CoffeeFile(path, this.build));
      }
      max = 1000;
      for (i = _j = 0; 0 <= max ? _j < max : _j > max; i = 0 <= max ? ++_j : --_j) {
        if (this._sort()) {
          break;
        }
        if (i === max) {
          console.log("Warning: Attempted to sort imports " + max + " times.");
        }
      }
    }

    FileList.prototype._sort = function() {
      var f1, f2, i2, path, _i, _j, _len, _len1, _ref;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        f1 = this[_i];
        _ref = f1.imports;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          path = _ref[_j];
          f2 = this._getFileByPath(path);
          i2 = this.indexOf(f2);
          if (_i < i2) {
            this._move(f2, i2, _i);
            return false;
          }
        }
      }
      return true;
    };

    FileList.prototype._move = function(file, oldIndex, newIndex) {
      this.splice(oldIndex, 1);
      return this.splice(newIndex, 0, file);
    };

    FileList.prototype._getFileByPath = function(path) {
      var file, _i, _len;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        file = this[_i];
        if (file.path === path) {
          return file;
        }
      }
    };

    FileList.prototype._print = function() {
      var file, _i, _len;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        file = this[_i];
        console.log(file.path);
      }
      return console.log("-------");
    };

    return FileList;

  })(Array);

  CoffeeFile = (function() {
    function CoffeeFile(path, build) {
      this.path = path;
      this.build = build;
      this._getPackage = __bind(this._getPackage, this);
      this._getClass = __bind(this._getClass, this);
      this._getPath = __bind(this._getPath, this);
      this._getImports = __bind(this._getImports, this);
      this._usedClass = __bind(this._usedClass, this);
      this._insertLocals = __bind(this._insertLocals, this);
      this._removeImports = __bind(this._removeImports, this);
      this._getClassIndex = __bind(this._getClassIndex, this);
      this._insertClassPackage = __bind(this._insertClassPackage, this);
      this._getExtensionPackage = __bind(this._getExtensionPackage, this);
      this._insertExtendsPackage = __bind(this._insertExtendsPackage, this);
      this.raw = fs.readFileSync(path, "utf8");
      this.lines = this.raw.split("\n");
      this.imports = this._getImports();
      this["package"] = this._getPackage(this.path);
      this.clazz = this._getClass(this.path);
      this.cIndex = this._getClassIndex();
      this.cLine = this.lines[this.cIndex];
      this._insertLocals();
      this._insertClassPackage();
      this._insertExtendsPackage();
      this._removeImports();
      this.code = this.lines.join("\n");
    }

    CoffeeFile.prototype._insertExtendsPackage = function() {
      var clazz, pack, parts, text;
      text = this.lines[this.cIndex];
      if (!text) {
        return;
      }
      if (!text.match(" extends ")) {
        return;
      }
      parts = text.split(" extends ");
      clazz = parts[parts.length - 1];
      pack = this._getExtensionPackage(clazz);
      if (pack.length > 0) {
        pack += ".";
      }
      return this.lines[this.cIndex] = text.replace(" extends ", " extends " + pack);
    };

    CoffeeFile.prototype._getExtensionPackage = function(clazz) {
      var pClazz, pack, path, _i, _len, _ref;
      _ref = this.imports;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        pClazz = this._getClass(path);
        if (pClazz === clazz) {
          pack = this._getPackage(path);
          return pack;
        }
      }
    };

    CoffeeFile.prototype._insertClassPackage = function() {
      var pack, text;
      text = this.lines[this.cIndex];
      if (!text) {
        return;
      }
      pack = this["package"];
      if (pack.length > 0) {
        pack += ".";
      }
      return this.lines[this.cIndex] = text.replace(this.clazz, pack + this.clazz);
    };

    CoffeeFile.prototype._getClassIndex = function() {
      var line, _i, _len, _ref;
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.indexOf("class ") === 0) {
          return _i;
        }
      }
    };

    CoffeeFile.prototype._removeImports = function() {
      var i, line, _i, _ref, _results;
      _results = [];
      for (i = _i = _ref = this.lines.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        line = this.lines[i];
        if (line.indexOf("import ") === 0) {
          _results.push(this.lines.splice(i, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    CoffeeFile.prototype._insertLocals = function() {
      var clazz, line, pack, path, _i, _len, _ref, _results;
      _ref = this.imports;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        pack = this._getPackage(path);
        clazz = this._getClass(path);
        if (!this._usedClass(clazz)) {
          continue;
        }
        if (pack.length > 0) {
          pack += ".";
        }
        line = "    " + clazz + " = " + pack + clazz;
        _results.push(this.lines.splice(this.cIndex + 1, 0, line));
      }
      return _results;
    };

    CoffeeFile.prototype._usedClass = function(clazz) {
      var i, line, _i, _ref, _ref1;
      for (i = _i = _ref = this.cIndex + 1, _ref1 = this.lines.length - 1; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        line = this.lines[i];
        if (line.match(clazz)) {
          return true;
        }
      }
      return false;
    };

    CoffeeFile.prototype._getImports = function() {
      var a, line, path, _i, _len, _ref;
      a = [];
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.indexOf("import ") === 0) {
          path = this._getPath(line);
          a.push(path);
        }
      }
      return a;
    };

    CoffeeFile.prototype._getPath = function(line) {
      var dir, path;
      dir = this.build.sourceDir;
      if (dir[dir.length - 1] !== "/") {
        dir = dir + "/";
      }
      path = line.replace("import ", "");
      path = path.replace(/\./g, "/");
      path = dir + path + ".coffee";
      return path;
    };

    CoffeeFile.prototype._getClass = function(path) {
      var clazz, parts;
      parts = path.split("/");
      clazz = parts[parts.length - 1];
      clazz = clazz.replace(".coffee", "");
      return clazz;
    };

    CoffeeFile.prototype._getPackage = function(path) {
      var pack, parts;
      path = path.replace("import ", "");
      path = path.replace(this.build.sourceDir + "/", "");
      parts = path.split("/");
      parts.pop();
      pack = parts.join(".");
      return pack;
    };

    return CoffeeFile;

  })();

  TempFile = (function() {
    function TempFile(build) {
      var output;
      this.build = build;
      this._getTempName = __bind(this._getTempName, this);
      this._getMain = __bind(this._getMain, this);
      output = this._getOutput();
      this.file = this._write(output);
    }

    TempFile.prototype.remove = function() {
      var files;
      fs.unlinkSync(this.file);
      files = fs.readdirSync(".tmp", "*.tmp");
      if (files.length === 0) {
        return fs.rmdirSync(".tmp");
      }
    };

    TempFile.prototype._write = function(output) {
      var file, name;
      name = this._getTempName(this.build.debugOutput);
      file = "" + name + ".tmp";
      fs.writeFileSync(file, output);
      return file;
    };

    TempFile.prototype._getOutput = function() {
      var file, line, main, name, output, pack, _i, _len, _ref;
      output = [];
      output.push(this._getNameSpaces());
      _ref = this.build.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        output.push(file.code + "\n");
      }
      output = output.join("");
      main = this._getMain();
      if (typeof this.build.instanceName !== "string") {
        return output;
      }
      if (!(typeof main.cLine === "string" && main.cLine.length > 0)) {
        return output;
      }
      pack = main["package"];
      if (pack.length > 0) {
        pack += ".";
      }
      name = pack + main.clazz;
      if (name) {
        line = "\n " + this.build.instanceName + " = new " + name + "()";
      }
      output += line;
      return output;
    };

    TempFile.prototype._getMain = function() {
      var file, _i, _len, _ref;
      _ref = this.build.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.path === this.build.mainClass) {
          return file;
        }
      }
    };

    TempFile.prototype._getTempName = function(path) {
      var name, parts;
      if (!fs.existsSync(".tmp")) {
        fs.mkdirSync(".tmp");
      }
      parts = path.split("/");
      name = parts[parts.length - 1];
      name = name.split(".")[0];
      name += "-" + parseInt(Math.random() * 1000000);
      name = ".tmp/" + name;
      return name;
    };

    TempFile.prototype._getNameSpaces = function() {
      var a, b, file, ns, part, parts, s, _i, _j, _k, _len, _len1, _len2, _ref;
      a = [];
      _ref = this.build.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file["package"]) {
          parts = file["package"].split(".");
          b = [];
          for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
            part = parts[_j];
            b.push(part);
            s = b.join(".");
            if (a.indexOf(s) === -1) {
              a.push(s);
            }
          }
        }
      }
      s = "";
      a = a.sort();
      for (_k = 0, _len2 = a.length; _k < _len2; _k++) {
        ns = a[_k];
        s += ns + " = this." + ns + " or {}" + "\n";
      }
      return s + "\n";
    };

    return TempFile;

  })();

  DebugFile = (function() {
    function DebugFile(build, callback) {
      var command, file, parts, path;
      this.build = build;
      parts = this.build.debugOutput.split("/");
      file = parts[parts.length - 1];
      path = this.build.debugOutput.replace(file, "");
      command = "coffee -b -j " + file;
      if (path.length > 0) {
        command += " -o " + path;
      }
      command += " -c " + this.build.tempFile.file + " ";
      cp.exec(command, function(error, stdout, stderr) {
        if (error) {
          console.log(error);
        }
        if (stdout) {
          console.log(stdout);
        }
        if (stderr) {
          console.log(stderr);
        }
        return callback(error);
      });
    }

    return DebugFile;

  })();

  ReleaseFile = (function() {
    function ReleaseFile(build, callback) {
      var command;
      this.build = build;
      command = "ccjs " + this.build.debugOutput + " > " + this.build.releaseOutput;
      cp.exec(command, function(error, stdout, stderr) {
        if (error) {
          console.log(error);
        }
        if (stdout) {
          console.log(stdout);
        }
        if (stderr) {
          console.log(stderr);
        }
        return callback(error);
      });
    }

    return ReleaseFile;

  })();

  module.exports.compile = function(sourceDir, mainClass, debugOutput, releaseOutput, instanceName) {
    return new Build(sourceDir, mainClass, debugOutput, releaseOutput, instanceName);
  };

}).call(this);
