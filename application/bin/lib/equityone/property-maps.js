// Generated by CoffeeScript 1.7.1
var net,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

net = this.net || {};

net.equityone = this.net.equityone || {};

net.equityone.maps = this.net.equityone.maps || {};

net.equityone.maps.common = this.net.equityone.maps.common || {};

net.equityone.maps.controller = this.net.equityone.maps.controller || {};

net.equityone.maps.event = this.net.equityone.maps.event || {};

net.equityone.maps.model = this.net.equityone.maps.model || {};

net.equityone.maps.view = this.net.equityone.maps.view || {};

net.equityone.maps.common.Utils = (function() {
  function Utils() {}

  Utils.getQuery = function(name) {
    var regex, results;
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    results = regex.exec(location.search);
    return (results == null ? void 0 : decodeURIComponent(results[1].replace(/\+/g, " ")));
  };

  Utils.request = function(url, callback) {
    var req;
    req = new XMLHttpRequest();
    req.open("GET", url, true);
    req.onreadystatechange = function() {
      if (req.readyState !== 4) {
        return;
      }
      if (req.status !== 200 && req.status !== 304) {
        return callback({
          error: true
        });
      } else {
        return callback({
          data: req.responseText
        });
      }
    };
    return req.send();
  };

  Utils.isSigma = function() {
    return location.host.indexOf("sigma.") > -1;
  };

  Utils.getPosition = function(obj) {
    var left, top;
    left = 0;
    top = 0;
    if (obj.offsetParent) {
      while (true) {
        left += obj.offsetLeft;
        top += obj.offsetTop;
        if (!(obj = obj.offsetParent)) {
          break;
        }
      }
      return {
        x: left,
        y: top
      };
    }
    return null;
  };

  return Utils;

})();

net.equityone.maps.event.EventDispatcher = (function() {
  function EventDispatcher(listeners) {
    this.listeners = listeners != null ? listeners : [];
    this.dispatchEvent = __bind(this.dispatchEvent, this);
    this.removeEventListener = __bind(this.removeEventListener, this);
    this.addEventListener = __bind(this.addEventListener, this);
  }

  EventDispatcher.prototype.addEventListener = function(type, callback) {
    var listener;
    listener = {
      type: type,
      callback: callback
    };
    return this.listeners.push(listener);
  };

  EventDispatcher.prototype.removeEventListener = function(type, callback) {
    var i, listener, _i, _ref, _results;
    _results = [];
    for (i = _i = _ref = this.listeners.length - 1; _ref <= 0 ? _i < 0 : _i > 0; i = _ref <= 0 ? ++_i : --_i) {
      listener = this.listeners[i];
      if (listener.type === type && listener.callback === callback) {
        _results.push(this.listeners.splice(i, 1));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  EventDispatcher.prototype.dispatchEvent = function(type, data) {
    var event, listener, _i, _len, _ref, _results;
    if (data == null) {
      data = null;
    }
    event = {
      target: this,
      type: type,
      data: data
    };
    _ref = this.listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      if (listener.type === type) {
        _results.push(listener.callback(event));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return EventDispatcher;

})();

net.equityone.maps.event.Event = (function() {
  function Event() {}

  Event.READY = "ready";

  Event.SHOW_UNIT = "showUnit";

  Event.HIDE_UNIT = "hideUnit";

  return Event;

})();

net.equityone.maps.model.PropertyModel = (function(_super) {
  var Event, Utils, home;

  __extends(PropertyModel, _super);

  Event = net.equityone.maps.event.Event;

  Utils = net.equityone.maps.common.Utils;

  home = Utils.isSigma() ? "sitemaps" : "site_maps";

  PropertyModel.prototype.data = {
    id: null,
    width: 0,
    height: 0,
    units: [],
    urls: {
      background: null,
      foreground: null
    }
  };

  PropertyModel.prototype.positionData = null;

  PropertyModel.prototype.propertyData = null;

  PropertyModel.prototype.loadCount = 0;

  function PropertyModel() {
    this._getPropertyById = __bind(this._getPropertyById, this);
    this._handleLoad = __bind(this._handleLoad, this);
    this._loadForegroundImage = __bind(this._loadForegroundImage, this);
    this._loadBackgroundImage = __bind(this._loadBackgroundImage, this);
    this._getSizeData = __bind(this._getSizeData, this);
    this._combine = __bind(this._combine, this);
    this._getPropertyData = __bind(this._getPropertyData, this);
    this._getPositionData = __bind(this._getPositionData, this);
    this.fetch = __bind(this.fetch, this);
    PropertyModel.__super__.constructor.call(this);
    this.data.id = Utils.getQuery("ID");
    this.data.urls.background = "" + home + "/assets/maps/" + this.data.id + "-background.png";
    this.data.urls.foreground = "" + home + "/assets/maps/" + this.data.id + "-foreground.png";
  }

  PropertyModel.prototype.fetch = function() {
    this._getPositionData();
    this._getPropertyData();
    return this._getSizeData();
  };

  PropertyModel.prototype._getPositionData = function() {
    var url;
    url = "" + home + "/data/" + this.data.id + ".json";
    return Utils.request(url, (function(_this) {
      return function(event) {
        _this.positionData = JSON.parse(event.data);
        if (_this.propertyData) {
          _this._combine();
        }
        return _this._handleLoad();
      };
    })(this));
  };

  PropertyModel.prototype._getPropertyData = function() {
    var external, internal, url;
    url = "" + location.protocol + "//" + location.host;
    internal = "/siteplanbrowser/xmlgen.aspx?ID=" + this.data.id;
    external = "/tools/xmlgen.aspx?ID=" + this.data.id;
    url += Utils.isSigma() ? internal : external;
    return Utils.request(url, (function(_this) {
      return function(event) {
        _this.propertyData = document.createElement("div");
        _this.propertyData.innerHTML = event.data;
        if (_this.positionData) {
          _this._combine();
        }
        return _this._handleLoad();
      };
    })(this));
  };

  PropertyModel.prototype._combine = function() {
    var id, pos, prop, _i, _len, _ref, _results;
    _ref = this.positionData;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pos = _ref[_i];
      id = pos.id.toLowerCase();
      prop = this._getPropertyById(id);
      if (!prop) {
        continue;
      }
      _results.push(this.data.units.push({
        id: id,
        shape: pos.shape,
        coords: pos.coords,
        occupant: prop.occupant,
        color: prop.color,
        fields: prop.fields
      }));
    }
    return _results;
  };

  PropertyModel.prototype._getSizeData = function() {
    this._loadBackgroundImage();
    return this._loadForegroundImage();
  };

  PropertyModel.prototype._loadBackgroundImage = function() {
    var img;
    img = new Image();
    img.src = this.data.urls.background;
    return img.onload = (function(_this) {
      return function() {
        _this.data.width = img.width;
        _this.data.height = img.height;
        return _this._handleLoad();
      };
    })(this);
  };

  PropertyModel.prototype._loadForegroundImage = function() {
    var img;
    img = new Image();
    img.src = this.data.urls.foreground;
    return img.onload = (function(_this) {
      return function() {
        return _this._handleLoad();
      };
    })(this);
  };

  PropertyModel.prototype._handleLoad = function() {
    if (++this.loadCount !== 4) {
      return;
    }
    return this.dispatchEvent(Event.READY);
  };

  PropertyModel.prototype._getPropertyById = function(id) {
    var elem, field, label, prop, value, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this.propertyData.getElementsByTagName("unit");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      prop = {};
      prop.id = elem.getElementsByTagName("unitnumber")[0].textContent;
      if (typeof prop.id !== "string") {
        continue;
      }
      prop.id = prop.id.toLowerCase().replace(/\ /g, "_");
      if (prop.id !== id) {
        continue;
      }
      prop.occupant = elem.getElementsByTagName("occupant")[0].textContent;
      prop.color = "#" + elem.getElementsByTagName("color")[0].textContent;
      prop.fields = [];
      _ref1 = elem.getElementsByTagName("item");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        field = _ref1[_j];
        label = field.getAttribute("label");
        value = field.getAttribute("val");
        prop.fields.push({
          label: label,
          value: value
        });
      }
      return prop;
    }
  };

  return PropertyModel;

})(net.equityone.maps.event.EventDispatcher);

net.equityone.maps.view.LoaderView = (function() {
  function LoaderView(parent) {
    this.parent = parent;
    this.hide = __bind(this.hide, this);
    this.node = document.createElement("div");
    this.node.className = "layer loader";
    this.parent.appendChild(this.node);
  }

  LoaderView.prototype.hide = function() {
    return this.parent.removeChild(this.node);
  };

  return LoaderView;

})();

net.equityone.maps.view.BackgroundView = (function() {
  function BackgroundView(parent) {
    this.parent = parent;
    this.render = __bind(this.render, this);
    this.node = document.createElement("div");
    this.node.className = "layer background";
    this.parent.appendChild(this.node);
  }

  BackgroundView.prototype.render = function(data) {
    this.data = data;
    return this.node.style.backgroundImage = "url(" + this.data + ")";
  };

  return BackgroundView;

})();

net.equityone.maps.view.MidgroundView = (function() {
  function MidgroundView(parent) {
    this.parent = parent;
    this._parseCoords = __bind(this._parseCoords, this);
    this._drawPoly = __bind(this._drawPoly, this);
    this._drawRect = __bind(this._drawRect, this);
    this.render = __bind(this.render, this);
    this.node = document.createElement("canvas");
    this.node.className = "layer midground";
    this.ctx = this.node.getContext("2d");
    this.parent.appendChild(this.node);
  }

  MidgroundView.prototype.render = function(data) {
    var action, unit, _i, _len, _ref, _results;
    this.data = data;
    this.node.width = this.data.width;
    this.node.height = this.data.height;
    _ref = this.data.units;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      unit = _ref[_i];
      action = unit.shape === "rect" ? this._drawRect : this._drawPoly;
      _results.push(action(unit));
    }
    return _results;
  };

  MidgroundView.prototype._drawRect = function(unit) {
    var coords, height, width, x, y;
    if (unit.coords == null) {
      return;
    }
    coords = unit.coords.split(",");
    x = coords[0];
    y = coords[1];
    width = coords[2] - x;
    height = coords[3] - y;
    this.ctx.fillStyle = unit.color;
    return this.ctx.fillRect(x, y, width, height);
  };

  MidgroundView.prototype._drawPoly = function(unit) {
    var point, points, _i, _len;
    if (unit.coords == null) {
      return;
    }
    points = this._parseCoords(unit.coords);
    this.ctx.fillStyle = unit.color;
    this.ctx.beginPath();
    this.ctx.moveTo(points[0].x, points[0].y);
    for (_i = 0, _len = points.length; _i < _len; _i++) {
      point = points[_i];
      this.ctx.lineTo(point.x, point.y);
    }
    this.ctx.closePath();
    return this.ctx.fill();
  };

  MidgroundView.prototype._parseCoords = function(coords) {
    var i, points, x, y, _i, _ref;
    points = [];
    coords = coords.split(",");
    for (i = _i = 0, _ref = coords.length; _i < _ref; i = _i += 2) {
      x = coords[i];
      y = coords[i + 1];
      points.push({
        x: x,
        y: y
      });
    }
    return points;
  };

  return MidgroundView;

})();

net.equityone.maps.view.ForegroundView = (function() {
  function ForegroundView(parent) {
    this.parent = parent;
    this.render = __bind(this.render, this);
    this.node = document.createElement("div");
    this.node.className = "layer foreground";
    this.parent.appendChild(this.node);
  }

  ForegroundView.prototype.render = function(data) {
    this.data = data;
    return this.node.style.backgroundImage = "url(" + this.data + ")";
  };

  return ForegroundView;

})();

net.equityone.maps.view.UnitsView = (function(_super) {
  var Event, Utils;

  __extends(UnitsView, _super);

  Utils = net.equityone.maps.common.Utils;

  Event = net.equityone.maps.event.Event;

  UnitsView.prototype.scaleX = 1;

  UnitsView.prototype.scaleY = 1;

  function UnitsView(parent) {
    this.parent = parent;
    this._onBodyDown = __bind(this._onBodyDown, this);
    this._parseCoords = __bind(this._parseCoords, this);
    this._drawPoly = __bind(this._drawPoly, this);
    this._drawRect = __bind(this._drawRect, this);
    this._getUnit = __bind(this._getUnit, this);
    this._onMouseOut = __bind(this._onMouseOut, this);
    this._onMouse = __bind(this._onMouse, this);
    this.render = __bind(this.render, this);
    UnitsView.__super__.constructor.call(this);
    this.node = document.createElement("canvas");
    this.node.className = "layer units";
    this.ctx = this.node.getContext("2d");
    this.parent.appendChild(this.node);
  }

  UnitsView.prototype.render = function(data) {
    var action, unit, _i, _len, _ref, _results;
    this.data = data;
    this.node.onmousemove = this._onMouse;
    this.node.onmousedown = this._onMouse;
    this.node.onmouseout = this._onMouseOut;
    this.scaleX = this.parent.offsetWidth / this.data.width;
    this.scaleY = this.parent.offsetHeight / this.data.height;
    this.node.width = this.data.width;
    this.node.height = this.data.height;
    document.body.onmousedown = this._onBodyDown;
    _ref = this.data.units;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      unit = _ref[_i];
      unit.uid = _i + 1;
      action = unit.shape === "rect" ? this._drawRect : this._drawPoly;
      _results.push(action(unit));
    }
    return _results;
  };

  UnitsView.prototype._onMouse = function(event) {
    var data, pos, uid, unit, x, y;
    pos = Utils.getPosition(this.node);
    x = parseInt((event.pageX - pos.x) / this.scaleX);
    y = parseInt((event.pageY - pos.y) / this.scaleY);
    data = this.ctx.getImageData(x, y, 1, 1).data;
    uid = data[0];
    unit = this._getUnit(uid);
    if (unit) {
      data = {
        id: unit.id,
        x: event.pageX,
        y: event.pageY
      };
      return this.dispatchEvent(Event.SHOW_UNIT, data);
    } else {
      return this.dispatchEvent(Event.HIDE_UNIT);
    }
  };

  UnitsView.prototype._onMouseOut = function() {
    return this.dispatchEvent(Event.HIDE_UNIT);
  };

  UnitsView.prototype._getUnit = function(uid) {
    var unit, _i, _len, _ref;
    _ref = this.data.units;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      unit = _ref[_i];
      if (unit.uid === uid) {
        return unit;
      }
    }
  };

  UnitsView.prototype._drawRect = function(unit) {
    var coords, height, width, x, y;
    if (!unit.coords) {
      return;
    }
    coords = unit.coords.split(",");
    x = coords[0];
    y = coords[1];
    width = coords[2] - x;
    height = coords[3] - y;
    this.ctx.fillStyle = "rgb(" + unit.uid + ", 0, 0)";
    return this.ctx.fillRect(x, y, width, height);
  };

  UnitsView.prototype._drawPoly = function(unit) {
    var point, points, _i, _len;
    if (!unit.coords) {
      return;
    }
    points = this._parseCoords(unit.coords);
    this.ctx.fillStyle = "rgb(" + unit.uid + ", 0, 0)";
    this.ctx.beginPath();
    this.ctx.moveTo(points[0].x, points[0].y);
    for (_i = 0, _len = points.length; _i < _len; _i++) {
      point = points[_i];
      this.ctx.lineTo(point.x, point.y);
    }
    this.ctx.closePath();
    return this.ctx.fill();
  };

  UnitsView.prototype._parseCoords = function(coords) {
    var i, points, x, y, _i, _ref;
    points = [];
    coords = coords.split(",");
    for (i = _i = 0, _ref = coords.length; _i < _ref; i = _i += 2) {
      x = coords[i];
      y = coords[i + 1];
      points.push({
        x: x,
        y: y
      });
    }
    return points;
  };

  UnitsView.prototype._onBodyDown = function(event) {
    var target;
    target = event.target || event.srcElement;
    if (target !== this.node) {
      return this.dispatchEvent(Event.HIDE_UNIT);
    }
  };

  return UnitsView;

})(net.equityone.maps.event.EventDispatcher);

net.equityone.maps.view.InfoView = (function() {
  var Event;

  Event = net.equityone.maps.event.Event;

  InfoView.prototype.data = null;

  InfoView.prototype.id = null;

  function InfoView(units) {
    this.units = units;
    this._hide = __bind(this._hide, this);
    this._getUnitData = __bind(this._getUnitData, this);
    this._position = __bind(this._position, this);
    this._populate = __bind(this._populate, this);
    this._show = __bind(this._show, this);
    this.node = document.createElement("div");
    this.mainNode = document.createElement("div");
    this.titleNode = document.createElement("div");
    this.contentNode = document.createElement("div");
    this.pointerNode = document.createElement("div");
    this.node.id = "property-unit-info";
    this.mainNode.className = "main";
    this.titleNode.className = "title";
    this.contentNode.className = "content";
    this.pointerNode.className = "pointer";
    this.units.addEventListener(Event.SHOW_UNIT, this._show);
    this.units.addEventListener(Event.HIDE_UNIT, this._hide);
    document.body.appendChild(this.node);
    document.body.appendChild(this.pointerNode);
    this.node.appendChild(this.pointerNode);
    this.node.appendChild(this.mainNode);
    this.mainNode.appendChild(this.titleNode);
    this.mainNode.appendChild(this.contentNode);
  }

  InfoView.prototype._show = function(event) {
    var id, x, y;
    this.node.style.display = "block";
    id = event.data.id;
    x = event.data.x;
    y = event.data.y;
    if (this.id !== id) {
      this._populate(id);
    }
    this._position(x, y);
    return this.id = id;
  };

  InfoView.prototype._populate = function(id) {
    var data, field, node, _i, _len, _ref, _results;
    data = this._getUnitData(id);
    this.titleNode.innerHTML = data.occupant;
    this.contentNode.style.backgroundColor = data.color;
    this.contentNode.innerHTML = "";
    _ref = data.fields;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      node = document.createElement("div");
      node.innerHTML = "" + field.label + ": " + field.value;
      node.className = "field";
      _results.push(this.contentNode.appendChild(node));
    }
    return _results;
  };

  InfoView.prototype._position = function(mouseX, mouseY) {
    var maxX, minX, minY, pc, pl, pt, x, y;
    x = mouseX - this.node.offsetWidth * 0.5;
    y = mouseY - this.node.offsetHeight - this.pointerNode.offsetHeight - 3;
    pc = "pointer";
    pl = this.node.offsetWidth * 0.5 - this.pointerNode.offsetWidth * 0.5;
    pt = this.node.offsetHeight;
    minY = 0;
    minX = 0;
    maxX = document.body.offsetWidth;
    if (y < minY) {
      y = minY + this.node.offsetHeight * 0.5;
      if (x < document.body.offsetWidth * 0.5) {
        x = mouseX + 25;
        pl = -this.pointerNode.offsetHeight;
        pc = "pointer left";
      } else {
        x = mouseX - this.node.offsetWidth - 25;
        pl = this.node.offsetWidth - 4;
        pc = "pointer right";
      }
      pt = mouseY - this.node.offsetTop - this.pointerNode.offsetHeight * 0.5;
      if (pt < 2) {
        pt = 2;
      }
    }
    if (x < minX) {
      x = minX;
      pl = mouseX - this.node.offsetLeft - this.pointerNode.offsetWidth * 0.5;
      if (pl < 2) {
        pl = 2;
      }
    }
    if (x > maxX) {
      x = maxX;
      pl = mouseX - this.node.offsetLeft - this.pointerNode.offsetWidth * 0.5;
    }
    this.pointerNode.className = pc;
    this.pointerNode.style.left = "" + pl + "px";
    this.pointerNode.style.top = "" + pt + "px";
    this.node.style.left = "" + x + "px";
    return this.node.style.top = "" + y + "px";
  };

  InfoView.prototype._getUnitData = function(id) {
    var unit, _i, _len, _ref;
    _ref = this.data.units;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      unit = _ref[_i];
      if (unit.id === id) {
        return unit;
      }
    }
  };

  InfoView.prototype._hide = function() {
    return this.node.style.display = "none";
  };

  return InfoView;

})();

net.equityone.maps.view.PropertyView = (function() {
  var BackgroundView, ForegroundView, InfoView, LoaderView, MidgroundView, UnitsView;

  InfoView = net.equityone.maps.view.InfoView;

  UnitsView = net.equityone.maps.view.UnitsView;

  ForegroundView = net.equityone.maps.view.ForegroundView;

  MidgroundView = net.equityone.maps.view.MidgroundView;

  BackgroundView = net.equityone.maps.view.BackgroundView;

  LoaderView = net.equityone.maps.view.LoaderView;

  function PropertyView() {
    this._css = __bind(this._css, this);
    this.render = __bind(this.render, this);
    this.parent = document.getElementById("pnlSiteMapFlash");
    this.node = document.createElement("div");
    this.loader = new LoaderView(this.node);
    this.background = new BackgroundView(this.node);
    this.midground = new MidgroundView(this.node);
    this.foreground = new ForegroundView(this.node);
    this.units = new UnitsView(this.node);
    this.info = new InfoView(this.units);
    this.node.id = "map-container";
    this.node.style.cssText = this._css();
    this.parent.appendChild(this.node);
  }

  PropertyView.prototype.render = function(data) {
    this.data = data;
    this.info.data = this.data;
    this.loader.hide();
    this.background.render(this.data.urls.background);
    this.midground.render(this.data);
    this.foreground.render(this.data.urls.foreground);
    return this.units.render(this.data);
  };

  PropertyView.prototype._css = function() {
    var height, width;
    width = this.parent.offsetWidth;
    height = Math.ceil(width * 0.66);
    return "position: absolute; width: " + width + "px; height: " + height + "px;";
  };

  return PropertyView;

})();

net.equityone.maps.controller.PropertyController = (function() {
  var Event;

  Event = net.equityone.maps.event.Event;

  function PropertyController(model, view) {
    this.model = model;
    this.view = view;
    this._onModelReady = __bind(this._onModelReady, this);
    this.init = __bind(this.init, this);
    this.model.addEventListener(Event.READY, this._onModelReady);
  }

  PropertyController.prototype.init = function() {
    return this.model.fetch();
  };

  PropertyController.prototype._onModelReady = function() {
    return this.view.render(this.model.data);
  };

  return PropertyController;

})();

net.equityone.maps.PropertyMaps = (function() {
  var PropertyController, PropertyModel, PropertyView;

  PropertyController = net.equityone.maps.controller.PropertyController;

  PropertyView = net.equityone.maps.view.PropertyView;

  PropertyModel = net.equityone.maps.model.PropertyModel;

  function PropertyMaps() {
    this.model = new PropertyModel();
    this.view = new PropertyView();
    this.controller = new PropertyController(this.model, this.view);
    this.controller.init();
  }

  return PropertyMaps;

})();

window.propertyMaps = new net.equityone.maps.PropertyMaps();
